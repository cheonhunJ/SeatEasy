package com.seateasy.booking;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * SeatEasy 프로그램은 학생들의 버스 예약과 예약 취소를 관리하는 시스템입니다.
 * 
 * 이 프로그램은 예약, 예약 취소, 예약 목록 조회 기능을 제공하며, 예약 취소가 반복되는 학생에게 패널티를 부여하여 예약 제한을 설정합니다.
 * 
 * @version 1.0
 * @since 2024-12-26
 */
public class SeatEasy {

    /**
     * 학생 예약 정보를 저장하는 클래스입니다.
     * 
     * @author Your Name
     * @version 1.0
     * @since 2024-12-26
     */
    static class Reservation {
        String studentId;  // 학생 ID
        String busTime;    // 예약한 버스 시간
        int seatNumber;    // 예약한 좌석 번호

        /**
         * Reservation 객체의 생성자입니다.
         * 
         * @param studentId 예약을 한 학생의 ID
         * @param busTime 예약한 버스의 시간
         * @param seatNumber 예약한 좌석 번호
         */
        Reservation(String studentId, String busTime, int seatNumber) {
            this.studentId = studentId;
            this.busTime = busTime;
            this.seatNumber = seatNumber;
        }

        /**
         * Reservation 객체의 정보를 문자열로 반환합니다.
         * 
         * @return 학생 ID, 예약 시간, 좌석 번호를 포함한 문자열
         */
        @Override
        public String toString() {
            return studentId + ", " + busTime + ", " + seatNumber;
        }
    }

    // 패널티 기록 저장
    static Map<String, Integer> penaltyMap = new HashMap<>();
    // 예약 목록
    static List<Reservation> reservations = new ArrayList<>();
    // 예약 정보 파일 경로
    static final String RESERVATION_FILE = "reservations.txt";
    // 최대 예약 취소 횟수
    static final int MAX_CANCELLATION = 2;
    // 예약 취소 후 패널티 기간 (일)
    static final int PENALTY_DURATION_DAYS = 7;

    /**
     * 프로그램을 시작하는 메소드입니다. 사용자로부터 입력을 받아 예약을 관리합니다.
     * 
     * @param args 명령행 인자
     * @throws IOException 파일 입출력 오류가 발생한 경우
     */
    public static void main(String[] args) throws IOException {
        loadReservations();

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. 예약하기\n2. 예약 취소\n3. 예약 목록 보기\n4. 종료");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    makeReservation(scanner);
                    break;
                case 2:
                    cancelReservation(scanner);
                    break;
                case 3:
                    showReservations();
                    break;
                case 4:
                    saveReservations();
                    System.out.println("프로그램을 종료합니다.");
                    return;
                default:
                    System.out.println("올바른 번호를 선택하세요.");
            }
        }
    }

    /**
     * 사용자가 버스를 예약하는 기능을 수행합니다.
     * 
     * @param scanner 사용자 입력을 위한 Scanner 객체
     */
    private static void makeReservation(Scanner scanner) {
        System.out.print("학번 입력: ");
        String studentId = scanner.nextLine();

        if (penaltyMap.containsKey(studentId)) {
            System.out.println("현재 패널티가 적용되어 예약할 수 없습니다.");
            return;
        }

        System.out.print("예약할 시간 입력 (HH:mm): ");
        String busTime = scanner.nextLine();

        if (!isValidTime(busTime)) {
            System.out.println("현재 시각으로부터 1시간 이후의 버스만 예약 가능합니다.");
            return;
        }

        System.out.print("좌석 번호 입력 (1~50): ");
        int seatNumber = scanner.nextInt();
        scanner.nextLine();

        if (isSeatReserved(busTime, seatNumber)) {
            System.out.println("이미 예약된 좌석입니다.");
            return;
        }

        reservations.add(new Reservation(studentId, busTime, seatNumber));
        System.out.println("예약이 완료되었습니다.");
    }

    /**
     * 사용자가 예약을 취소하는 기능을 수행합니다.
     * 
     * @param scanner 사용자 입력을 위한 Scanner 객체
     */
    private static void cancelReservation(Scanner scanner) {
        System.out.print("학번 입력: ");
        String studentId = scanner.nextLine();

        System.out.print("취소할 시간 입력 (HH:mm): ");
        String busTime = scanner.nextLine();

        System.out.print("취소할 좌석 번호 입력: ");
        int seatNumber = scanner.nextInt();
        scanner.nextLine();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime busDateTime = getDateTimeFromBusTime(busTime);
        if (busDateTime.minusMinutes(30).isBefore(now)) {
            System.out.println("버스 출발 30분 전에는 예약을 취소할 수 없습니다.");
            return;
        }

        boolean removed = reservations.removeIf(r -> r.studentId.equals(studentId) && r.busTime.equals(busTime) && r.seatNumber == seatNumber);
        if (removed) {
            System.out.println("예약이 취소되었습니다.");
            penaltyMap.put(studentId, penaltyMap.getOrDefault(studentId, 0) + 1);
            if (penaltyMap.get(studentId) >= MAX_CANCELLATION) {
                System.out.println("예약 취소가 누적되어 일주일 동안 예약이 불가능합니다.");
            }
        } else {
            System.out.println("취소할 예약을 찾을 수 없습니다.");
        }
    }

    /**
     * 예약 목록을 출력합니다.
     */
    private static void showReservations() {
        if (reservations.isEmpty()) {
            System.out.println("현재 예약된 좌석이 없습니다.");
        } else {
            reservations.forEach(System.out::println);
        }
    }

    /**
     * 주어진 버스 시간이 유효한지 검사합니다. (현재 시각으로부터 1시간 이후의 시간만 예약 가능)
     * 
     * @param busTime 예약할 버스 시간
     * @return 유효한 시간인지 여부
     */
    private static boolean isValidTime(String busTime) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime busDateTime = getDateTimeFromBusTime(busTime);
        return busDateTime.isAfter(now.plusHours(1));
    }

    /**
     * 버스 시간 문자열을 LocalDateTime 객체로 변환합니다.
     * 
     * @param busTime 버스 시간 (HH:mm 형식)
     * @return 변환된 LocalDateTime 객체
     */
    private static LocalDateTime getDateTimeFromBusTime(String busTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalDateTime now = LocalDateTime.now();
        return LocalDateTime.parse(now.toLocalDate() + "T" + busTime, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    }

    /**
     * 주어진 버스 시간과 좌석 번호가 이미 예약되었는지 확인합니다.
     * 
     * @param busTime 예약하려는 버스 시간
     * @param seatNumber 예약하려는 좌석 번호
     * @return 예약 여부
     */
    private static boolean isSeatReserved(String busTime, int seatNumber) {
        return reservations.stream().anyMatch(r -> r.busTime.equals(busTime) && r.seatNumber == seatNumber);
    }

    /**
     * 예약 파일을 불러와서 예약 목록을 초기화합니다.
     * 
     * @throws IOException 파일 입출력 오류가 발생한 경우
     */
    private static void loadReservations() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(RESERVATION_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(", ");
                reservations.add(new Reservation(parts[0], parts[1], Integer.parseInt(parts[2])));
            }
        } catch (IOException e) {
            System.out.println("예약 파일을 불러오는 중 오류가 발생했습니다.");
        }
    }

    /**
     * 예약 목록을 파일에 저장합니다.
     * 
     * @throws IOException 파일 입출력 오류가 발생한 경우
     */
    private static void saveReservations() throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(RESERVATION_FILE))) {
            for (Reservation reservation : reservations) {
                writer.write(reservation.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("예약 파일 저장 중 오류가 발생했습니다.");
        }
    }
}
