package com.seateasy.booking;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class SeatEasy {

    // 학생 예약 정보 저장 클래스
    static class Reservation {
        String studentId;
        String busTime;
        int seatNumber;

        Reservation(String studentId, String busTime, int seatNumber) {
            this.studentId = studentId;
            this.busTime = busTime;
            this.seatNumber = seatNumber;
        }

        @Override
        public String toString() {
            return studentId + ", " + busTime + ", " + seatNumber;
        }
    }

    // 패널티 기록 저장
    static Map<String, Integer> penaltyMap = new HashMap<>();
    static List<Reservation> reservations = new ArrayList<>();
    static final String RESERVATION_FILE = "reservations.txt";
    static final int MAX_CANCELLATION = 2;
    static final int PENALTY_DURATION_DAYS = 7;

    public static void main(String[] args) throws IOException {
        loadReservations();

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. 예약하기\n2. 예약 취소\n3. 예약 목록 보기\n4. 종료");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    makeReservation(scanner);
                    break;
                case 2:
                    cancelReservation(scanner);
                    break;
                case 3:
                    showReservations();
                    break;
                case 4:
                    saveReservations();
                    System.out.println("프로그램을 종료합니다.");
                    return;
                default:
                    System.out.println("올바른 번호를 선택하세요.");
            }
        }
    }

    private static void makeReservation(Scanner scanner) {
        System.out.print("학번 입력: ");
        String studentId = scanner.nextLine();

        if (penaltyMap.containsKey(studentId)) {
            System.out.println("현재 패널티가 적용되어 예약할 수 없습니다.");
            return;
        }

        System.out.print("예약할 시간 입력 (HH:mm): ");
        String busTime = scanner.nextLine();

        if (!isValidTime(busTime)) {
            System.out.println("현재 시각으로부터 1시간 이후의 버스만 예약 가능합니다.");
            return;
        }

        System.out.print("좌석 번호 입력 (1~50): ");
        int seatNumber = scanner.nextInt();
        scanner.nextLine();

        if (isSeatReserved(busTime, seatNumber)) {
            System.out.println("이미 예약된 좌석입니다.");
            return;
        }

        reservations.add(new Reservation(studentId, busTime, seatNumber));
        System.out.println("예약이 완료되었습니다.");
    }

    private static void cancelReservation(Scanner scanner) {
        System.out.print("학번 입력: ");
        String studentId = scanner.nextLine();

        System.out.print("취소할 시간 입력 (HH:mm): ");
        String busTime = scanner.nextLine();

        System.out.print("취소할 좌석 번호 입력: ");
        int seatNumber = scanner.nextInt();
        scanner.nextLine();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime busDateTime = getDateTimeFromBusTime(busTime);
        if (busDateTime.minusMinutes(30).isBefore(now)) {
            System.out.println("버스 출발 30분 전에는 예약을 취소할 수 없습니다.");
            return;
        }

        boolean removed = reservations.removeIf(r -> r.studentId.equals(studentId) && r.busTime.equals(busTime) && r.seatNumber == seatNumber);
        if (removed) {
            System.out.println("예약이 취소되었습니다.");
            penaltyMap.put(studentId, penaltyMap.getOrDefault(studentId, 0) + 1);
            if (penaltyMap.get(studentId) >= MAX_CANCELLATION) {
                System.out.println("예약 취소가 누적되어 일주일 동안 예약이 불가능합니다.");
            }
        } else {
            System.out.println("취소할 예약을 찾을 수 없습니다.");
        }
    }

    private static void showReservations() {
        if (reservations.isEmpty()) {
            System.out.println("현재 예약된 좌석이 없습니다.");
        } else {
            reservations.forEach(System.out::println);
        }
    }

    private static boolean isValidTime(String busTime) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime busDateTime = getDateTimeFromBusTime(busTime);
        return busDateTime.isAfter(now.plusHours(1));
    }

    private static LocalDateTime getDateTimeFromBusTime(String busTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalDateTime now = LocalDateTime.now();
        return LocalDateTime.parse(now.toLocalDate() + "T" + busTime, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    }

    private static boolean isSeatReserved(String busTime, int seatNumber) {
        return reservations.stream().anyMatch(r -> r.busTime.equals(busTime) && r.seatNumber == seatNumber);
    }

    private static void loadReservations() {
        try (BufferedReader reader = new BufferedReader(new FileReader(RESERVATION_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(", ");
                reservations.add(new Reservation(parts[0], parts[1], Integer.parseInt(parts[2])));
            }
        } catch (IOException e) {
            System.out.println("예약 파일을 불러오는 중 오류가 발생했습니다.");
        }
    }

    private static void saveReservations() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(RESERVATION_FILE))) {
            for (Reservation reservation : reservations) {
                writer.write(reservation.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("예약 파일 저장 중 오류가 발생했습니다.");
        }
    }
}


